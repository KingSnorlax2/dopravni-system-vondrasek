generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model Auto {
  id          Int      @id @default(autoincrement())
  spz         String   @unique
  znacka      String
  model       String
  rokVyroby   Int
  najezd      Int
  stav        String
  poznamka    String?
  datumSTK    DateTime?
  fotky       Fotka[]  @relation("AutoFotky")
  poznatky    Note[]   @relation("AutoNotes")
  transakce   Transakce[] @relation("AutoTransakce")
  gpsZaznamy  GPSZaznam[] @relation("AutoGPS")
  udrzby      Udrzba[] @relation("AutoUdrzba")
  tankovani   Tankovani[] @relation("AutoTankovani")
  aktivni     Boolean @default(true)
  opravy      Oprava[]   @relation("AutoOpravy")
}

model Fotka {
  id        String   @id @default(cuid())
  data      String   @db.Text
  mimeType  String
  autoId    Int?
  auto      Auto?    @relation("AutoFotky", fields: [autoId], references: [id], onDelete: Cascade)
}

model Note {
  id        Int      @id @default(autoincrement())
  text      String
  auto      Auto     @relation("AutoNotes", fields: [autoId], references: [id], onDelete: Cascade)
  autoId    Int
  createdAt DateTime @default(now())
}

model Transakce {
  id      Int      @id @default(autoincrement())
  nazev   String
  autoId  Int?
  castka  Float
  datum   DateTime
  typ     String
  popis   String 
  faktura String?  
  auto    Auto?    @relation("AutoTransakce", fields: [autoId], references: [id])
}

model GPSZaznam {
  id        Int      @id @default(autoincrement())
  autoId    Int
  auto      Auto     @relation("AutoGPS", fields: [autoId], references: [id], onDelete: Cascade)
  latitude  Float
  longitude Float
  rychlost  Float?
  cas       DateTime @default(now())
  stav      String?  // např. "jízda", "parkování", "volnoběh"
}

model Udrzba {
  id              Int      @id @default(autoincrement())
  autoId          Int
  auto            Auto     @relation("AutoUdrzba", fields: [autoId], references: [id], onDelete: Cascade)
  typ             String   // např. "servis", "STK", "výměna oleje"
  popis           String
  datumProvedeni  DateTime
  datumPristi     DateTime?
  najezdKm        Int
  nakladyCelkem   Float
  provedeno       Boolean  @default(false)
  dokumenty       String?  // URL nebo cesta k dokumentům
  poznamka        String?
}

model Tankovani {
  id            Int      @id @default(autoincrement())
  autoId        Int
  auto          Auto     @relation("AutoTankovani", fields: [autoId], references: [id], onDelete: Cascade)
  datum         DateTime
  mnozstviLitru Float
  cenaZaLitr    Float
  celkovaCena   Float
  typPaliva     String
  najezdKm      Int
  mistoTankovani String?
  plnaNadrz     Boolean  @default(true)
  poznamka      String?
}

model ArchivedAuto {
  id            Int       @id @default(autoincrement())
  originalId    Int
  spz           String
  znacka        String
  model         String
  rokVyroby     Int
  najezd        Int
  stav          String
  poznamka      String?
  datumSTK      DateTime?
  datumArchivace DateTime @default(now())
  duvodArchivace String?
  archivedData  Json     // Store any additional data as JSON
}

model Oprava {
  id          Int      @id @default(autoincrement())
  autoId      Int
  auto        Auto     @relation("AutoOpravy", fields: [autoId], references: [id], onDelete: Cascade)
  datumOpravy DateTime
  popis       String
  cena        Float
  typOpravy   String   
  stav        String   
  servis      String?
  poznamka    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Settings {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  category  String
  label     String
  type      String   // "text", "number", "boolean", "select"
  options   Json?    // For select type settings
  updatedAt DateTime @updatedAt
}

model User {
  id       String    @id @default(cuid())
  email    String    @unique
  password String
  name     String?
  role     String    @default("USER")
}